/* eslint-disable */
module.exports = /*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */
(function () {
	function peg$subclass(child, parent) {
		function ctor() { this.constructor = child; }
		ctor.prototype = parent.prototype;
		child.prototype = new ctor();
	}

	function peg$SyntaxError(message, expected, found, location) {
		this.message = message;
		this.expected = expected;
		this.found = found;
		this.location = location;
		this.name = 'SyntaxError';

		if (typeof Error.captureStackTrace === 'function') {
			Error.captureStackTrace(this, peg$SyntaxError);
		}
	}

	peg$subclass(peg$SyntaxError, Error);

	peg$SyntaxError.buildMessage = function (expected, found) {
		const DESCRIBE_EXPECTATION_FNS = {
			literal(expectation) {
				return `"${literalEscape(expectation.text)}"`;
			},

			class(expectation) {
				let escapedParts = '',
					i;

				for (i = 0; i < expectation.parts.length; i++) {
					escapedParts += expectation.parts[i] instanceof Array
						? `${classEscape(expectation.parts[i][0])}-${classEscape(expectation.parts[i][1])}`
						: classEscape(expectation.parts[i]);
				}

				return `[${expectation.inverted ? '^' : ''}${escapedParts}]`;
			},

			any(expectation) {
				return 'any character';
			},

			end(expectation) {
				return 'end of input';
			},

			other(expectation) {
				return expectation.description;
			}
		};

		function hex(ch) {
			return ch.charCodeAt(0).toString(16).toUpperCase();
		}

		function literalEscape(s) {
			return s
				.replace(/\\/g, '\\\\')
				.replace(/"/g, '\\"')
				.replace(/\0/g, '\\0')
				.replace(/\t/g, '\\t')
				.replace(/\n/g, '\\n')
				.replace(/\r/g, '\\r')
				.replace(/[\x00-\x0F]/g, ch => `\\x0${hex(ch)}`)
				.replace(/[\x10-\x1F\x7F-\x9F]/g, ch => `\\x${hex(ch)}`);
		}

		function classEscape(s) {
			return s
				.replace(/\\/g, '\\\\')
				.replace(/\]/g, '\\]')
				.replace(/\^/g, '\\^')
				.replace(/-/g, '\\-')
				.replace(/\0/g, '\\0')
				.replace(/\t/g, '\\t')
				.replace(/\n/g, '\\n')
				.replace(/\r/g, '\\r')
				.replace(/[\x00-\x0F]/g, ch => `\\x0${hex(ch)}`)
				.replace(/[\x10-\x1F\x7F-\x9F]/g, ch => `\\x${hex(ch)}`);
		}

		function describeExpectation(expectation) {
			return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
		}

		function describeExpected(expected) {
			let descriptions = new Array(expected.length),
				i,
				j;

			for (i = 0; i < expected.length; i++) {
				descriptions[i] = describeExpectation(expected[i]);
			}

			descriptions.sort();

			if (descriptions.length > 0) {
				for (i = 1, j = 1; i < descriptions.length; i++) {
					if (descriptions[i - 1] !== descriptions[i]) {
						descriptions[j] = descriptions[i];
						j++;
					}
				}
				descriptions.length = j;
			}

			switch (descriptions.length) {
				case 1:
					return descriptions[0];

				case 2:
					return `${descriptions[0]} or ${descriptions[1]}`;

				default:
					return `${descriptions.slice(0, -1).join(', ')
					}, or ${
						descriptions[descriptions.length - 1]}`;
			}
		}

		function describeFound(found) {
			return found ? `"${literalEscape(found)}"` : 'end of input';
		}

		return `Expected ${describeExpected(expected)} but ${describeFound(found)} found.`;
	};

	function peg$parse(input, options) {
		options = options !== void 0 ? options : {};

		let peg$FAILED = {},

			peg$startRuleFunctions = { input: peg$parseinput },
			peg$startRuleFunction = peg$parseinput,

			peg$c0 = function (inp) { return inp; },
			peg$c1 = peg$otherExpectation('Message'),
			peg$c2 = peg$anyExpectation(),
			peg$c3 = function () { return [{ cmd: 'text', argv: [text()], div: null }]; },
			peg$c4 = peg$otherExpectation('command'),
			peg$c5 = function (cmd) { return cmd; },
			peg$c6 = /^[\/]/,
			peg$c7 = peg$classExpectation(['/'], false, false),
			peg$c8 = function (identifier, argv, div) {
				return {
					cmd: identifier,
					argv,
					div
				};
			},
			peg$c9 = peg$otherExpectation('command separator'),
			peg$c10 = function (redir) { return redir; },
			peg$c11 = peg$otherExpectation('whitespace'),
			peg$c12 = /^[ \t]/,
			peg$c13 = peg$classExpectation([' ', '\t'], false, false),
			peg$c14 = /^[ \t\n\r]/,
			peg$c15 = peg$classExpectation([' ', '\t', '\n', '\r'], false, false),
			peg$c16 = peg$otherExpectation('redirection'),
			peg$c17 = ';',
			peg$c18 = peg$literalExpectation(';', false),
			peg$c19 = function () { return ';'; },
			peg$c20 = '|',
			peg$c21 = peg$literalExpectation('|', false),
			peg$c22 = function () { return '|'; },
			peg$c23 = '>&',
			peg$c24 = peg$literalExpectation('>&', false),
			peg$c25 = function (dig, op, dig2) { return { redirect: op, augend: dig, addend: dig2 }; },
			peg$c26 = '-',
			peg$c27 = peg$literalExpectation('-', false),
			peg$c28 = function (dig, op, add) { return { redirect: op, augend: dig, addend: add }; },
			peg$c29 = '<&',
			peg$c30 = peg$literalExpectation('<&', false),
			peg$c31 = function (dig, op, dig2) { return { redirect: op, addend: dig2, augend: dig }; },
			peg$c32 = '>>',
			peg$c33 = peg$literalExpectation('>>', false),
			peg$c34 = function (dig, op) { return { redirect: op, augend: dig }; },
			peg$c35 = '>|',
			peg$c36 = peg$literalExpectation('>|', false),
			peg$c37 = '>',
			peg$c38 = peg$literalExpectation('>', false),
			peg$c39 = '<<-',
			peg$c40 = peg$literalExpectation('<<-', false),
			peg$c41 = '<<',
			peg$c42 = peg$literalExpectation('<<', false),
			peg$c43 = '<>',
			peg$c44 = peg$literalExpectation('<>', false),
			peg$c45 = '<',
			peg$c46 = peg$literalExpectation('<', false),
			peg$c47 = function (op, dig) { return { redirect: op, addend: dig }; },
			peg$c48 = function (op, add) { return { redirect: op, addend: add }; },
			peg$c49 = function (op) { return { redirect: op }; },
			peg$c50 = '&>',
			peg$c51 = peg$literalExpectation('&>', false),
			peg$c52 = peg$otherExpectation('argument'),
			peg$c53 = function (val) { return val; },
			peg$c54 = peg$otherExpectation('value'),
			peg$c55 = 'false',
			peg$c56 = peg$literalExpectation('false', false),
			peg$c57 = function () { return false; },
			peg$c58 = 'null',
			peg$c59 = peg$literalExpectation('null', false),
			peg$c60 = function () { return null; },
			peg$c61 = 'true',
			peg$c62 = peg$literalExpectation('true', false),
			peg$c63 = function () { return true; },
			peg$c64 = peg$otherExpectation('variable'),
			peg$c65 = function (varname, val) { return { name: varname, value: val }; },
			peg$c66 = /^[A-Za-z]/,
			peg$c67 = peg$classExpectation([['A', 'Z'], ['a', 'z']], false, false),
			peg$c68 = /^[A-Za-z0-9_\-]/,
			peg$c69 = peg$classExpectation([['A', 'Z'], ['a', 'z'], ['0', '9'], '_', '-'], false, false),
			peg$c70 = function () { return text(); },
			peg$c71 = peg$otherExpectation('variable assignment'),
			peg$c72 = '=',
			peg$c73 = peg$literalExpectation('=', false),
			peg$c74 = peg$otherExpectation('number'),
			peg$c75 = function () { return parseFloat(text()); },
			peg$c76 = peg$otherExpectation('decimal point'),
			peg$c77 = '.',
			peg$c78 = peg$literalExpectation('.', false),
			peg$c79 = peg$otherExpectation('digit'),
			peg$c80 = /^[1-9]/,
			peg$c81 = peg$classExpectation([['1', '9']], false, false),
			peg$c82 = peg$otherExpectation('e'),
			peg$c83 = /^[eE]/,
			peg$c84 = peg$classExpectation(['e', 'E'], false, false),
			peg$c85 = peg$otherExpectation('expression'),
			peg$c86 = peg$otherExpectation('fraction'),
			peg$c87 = peg$otherExpectation('integer'),
			peg$c88 = peg$otherExpectation('minus'),
			peg$c89 = peg$otherExpectation('plus'),
			peg$c90 = '+',
			peg$c91 = peg$literalExpectation('+', false),
			peg$c92 = peg$otherExpectation('zero'),
			peg$c93 = '0',
			peg$c94 = peg$literalExpectation('0', false),
			peg$c95 = peg$otherExpectation('identifier'),
			peg$c96 = /^[$~.\/A-Za-z]/,
			peg$c97 = peg$classExpectation(['$', '~', '.', '/', ['A', 'Z'], ['a', 'z']], false, false),
			peg$c98 = /^[A-Za-z0-9_.\/~]/,
			peg$c99 = peg$classExpectation([['A', 'Z'], ['a', 'z'], ['0', '9'], '_', '.', '/', '~'], false, false),
			peg$c100 = peg$otherExpectation('string'),
			peg$c101 = function (chars) { return chars.join(''); },
			peg$c102 = peg$otherExpectation('character'),
			peg$c103 = '"',
			peg$c104 = peg$literalExpectation('"', false),
			peg$c105 = '\\',
			peg$c106 = peg$literalExpectation('\\', false),
			peg$c107 = '/',
			peg$c108 = peg$literalExpectation('/', false),
			peg$c109 = 'b',
			peg$c110 = peg$literalExpectation('b', false),
			peg$c111 = function () { return '\b'; },
			peg$c112 = 'f',
			peg$c113 = peg$literalExpectation('f', false),
			peg$c114 = function () { return '\f'; },
			peg$c115 = 'n',
			peg$c116 = peg$literalExpectation('n', false),
			peg$c117 = function () { return '\n'; },
			peg$c118 = 'r',
			peg$c119 = peg$literalExpectation('r', false),
			peg$c120 = function () { return '\r'; },
			peg$c121 = 't',
			peg$c122 = peg$literalExpectation('t', false),
			peg$c123 = function () { return '\t'; },
			peg$c124 = 'u',
			peg$c125 = peg$literalExpectation('u', false),
			peg$c126 = function (digits) {
				return String.fromCharCode(parseInt(digits, 16));
			},
			peg$c127 = function (sequence) { return sequence; },
			peg$c128 = peg$otherExpectation('escape'),
			peg$c129 = peg$otherExpectation('quotation mark'),
			peg$c130 = peg$otherExpectation('unescaped character'),
			peg$c131 = /^[^\0-\x1F"\\]/,
			peg$c132 = peg$classExpectation([['\0', '\x1F'], '"', '\\'], true, false),
			peg$c133 = /^[0-9]/,
			peg$c134 = peg$classExpectation([['0', '9']], false, false),
			peg$c135 = peg$otherExpectation('hexadecimal digit'),
			peg$c136 = /^[0-9a-f]/i,
			peg$c137 = peg$classExpectation([['0', '9'], ['a', 'f']], false, true),

			peg$currPos = 0,
			peg$savedPos = 0,
			peg$posDetailsCache = [{ line: 1, column: 1 }],
			peg$maxFailPos = 0,
			peg$maxFailExpected = [],
			peg$silentFails = 0,

			peg$result;

		if ('startRule' in options) {
			if (!(options.startRule in peg$startRuleFunctions)) {
				throw new Error(`Can't start parsing from rule "${options.startRule}".`);
			}

			peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
		}

		function text() {
			return input.substring(peg$savedPos, peg$currPos);
		}

		function location() {
			return peg$computeLocation(peg$savedPos, peg$currPos);
		}

		function expected(description, location) {
			location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos);

			throw peg$buildStructuredError(
				[peg$otherExpectation(description)],
				input.substring(peg$savedPos, peg$currPos),
				location
			);
		}

		function error(message, location) {
			location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos);

			throw peg$buildSimpleError(message, location);
		}

		function peg$literalExpectation(text, ignoreCase) {
			return { type: 'literal', text, ignoreCase };
		}

		function peg$classExpectation(parts, inverted, ignoreCase) {
			return {
				type: 'class', parts, inverted, ignoreCase
			};
		}

		function peg$anyExpectation() {
			return { type: 'any' };
		}

		function peg$endExpectation() {
			return { type: 'end' };
		}

		function peg$otherExpectation(description) {
			return { type: 'other', description };
		}

		function peg$computePosDetails(pos) {
			let details = peg$posDetailsCache[pos],
				p;

			if (details) {
				return details;
			}
			p = pos - 1;
			while (!peg$posDetailsCache[p]) {
				p--;
			}

			details = peg$posDetailsCache[p];
			details = {
				line: details.line,
				column: details.column
			};

			while (p < pos) {
				if (input.charCodeAt(p) === 10) {
					details.line++;
					details.column = 1;
				} else {
					details.column++;
				}

				p++;
			}

			peg$posDetailsCache[pos] = details;
			return details;
		}

		function peg$computeLocation(startPos, endPos) {
			let startPosDetails = peg$computePosDetails(startPos),
				endPosDetails = peg$computePosDetails(endPos);

			return {
				start: {
					offset: startPos,
					line: startPosDetails.line,
					column: startPosDetails.column
				},
				end: {
					offset: endPos,
					line: endPosDetails.line,
					column: endPosDetails.column
				}
			};
		}

		function peg$fail(expected) {
			if (peg$currPos < peg$maxFailPos) { return; }

			if (peg$currPos > peg$maxFailPos) {
				peg$maxFailPos = peg$currPos;
				peg$maxFailExpected = [];
			}

			peg$maxFailExpected.push(expected);
		}

		function peg$buildSimpleError(message, location) {
			return new peg$SyntaxError(message, null, null, location);
		}

		function peg$buildStructuredError(expected, found, location) {
			return new peg$SyntaxError(
				peg$SyntaxError.buildMessage(expected, found),
				expected,
				found,
				location
			);
		}

		function peg$parseinput() {
			let s0,
				s1;

			s0 = peg$currPos;
			s1 = peg$parsecommands();
			if (s1 === peg$FAILED) {
				s1 = peg$parsemessage();
			}
			if (s1 !== peg$FAILED) {
				peg$savedPos = s0;
				s1 = peg$c0(s1);
			}
			s0 = s1;

			return s0;
		}

		function peg$parsemessage() {
			let s0,
				s1,
				s2;

			peg$silentFails++;
			s0 = peg$currPos;
			s1 = [];
			if (input.length > peg$currPos) {
				s2 = input.charAt(peg$currPos);
				peg$currPos++;
			} else {
				s2 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c2); }
			}
			while (s2 !== peg$FAILED) {
				s1.push(s2);
				if (input.length > peg$currPos) {
					s2 = input.charAt(peg$currPos);
					peg$currPos++;
				} else {
					s2 = peg$FAILED;
					if (peg$silentFails === 0) { peg$fail(peg$c2); }
				}
			}
			if (s1 !== peg$FAILED) {
				peg$savedPos = s0;
				s1 = peg$c3();
			}
			s0 = s1;
			peg$silentFails--;
			if (s0 === peg$FAILED) {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c1); }
			}

			return s0;
		}

		function peg$parsecommands() {
			let s0,
				s1,
				s2;

			peg$silentFails++;
			s0 = peg$currPos;
			s1 = [];
			s2 = peg$parsecommandText();
			if (s2 !== peg$FAILED) {
				while (s2 !== peg$FAILED) {
					s1.push(s2);
					s2 = peg$parsecommandText();
				}
			} else {
				s1 = peg$FAILED;
			}
			if (s1 !== peg$FAILED) {
				peg$savedPos = s0;
				s1 = peg$c5(s1);
			}
			s0 = s1;
			peg$silentFails--;
			if (s0 === peg$FAILED) {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c4); }
			}

			return s0;
		}

		function peg$parsecommandText() {
			let s0,
				s1,
				s2,
				s3,
				s4,
				s5,
				s6;

			peg$silentFails++;
			s0 = peg$currPos;
			if (peg$c6.test(input.charAt(peg$currPos))) {
				s1 = input.charAt(peg$currPos);
				peg$currPos++;
			} else {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c7); }
			}
			if (s1 !== peg$FAILED) {
				s2 = peg$parseidentifier();
				if (s2 !== peg$FAILED) {
					s3 = [];
					s4 = peg$parsearg();
					while (s4 !== peg$FAILED) {
						s3.push(s4);
						s4 = peg$parsearg();
					}
					if (s3 !== peg$FAILED) {
						s4 = peg$parsenbws();
						if (s4 !== peg$FAILED) {
							s5 = peg$parsecmdDivider();
							if (s5 !== peg$FAILED) {
								s6 = peg$parsews();
								if (s6 !== peg$FAILED) {
									peg$savedPos = s0;
									s1 = peg$c8(s2, s3, s5);
									s0 = s1;
								} else {
									peg$currPos = s0;
									s0 = peg$FAILED;
								}
							} else {
								peg$currPos = s0;
								s0 = peg$FAILED;
							}
						} else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}
			peg$silentFails--;
			if (s0 === peg$FAILED) {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c4); }
			}

			return s0;
		}

		function peg$parsecmdDivider() {
			let s0,
				s1;

			peg$silentFails++;
			s0 = peg$currPos;
			s1 = peg$parseredirection();
			if (s1 === peg$FAILED) {
				s1 = null;
			}
			if (s1 !== peg$FAILED) {
				peg$savedPos = s0;
				s1 = peg$c10(s1);
			}
			s0 = s1;
			peg$silentFails--;
			if (s0 === peg$FAILED) {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c9); }
			}

			return s0;
		}

		function peg$parsenbws() {
			let s0,
				s1;

			peg$silentFails++;
			s0 = [];
			if (peg$c12.test(input.charAt(peg$currPos))) {
				s1 = input.charAt(peg$currPos);
				peg$currPos++;
			} else {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c13); }
			}
			while (s1 !== peg$FAILED) {
				s0.push(s1);
				if (peg$c12.test(input.charAt(peg$currPos))) {
					s1 = input.charAt(peg$currPos);
					peg$currPos++;
				} else {
					s1 = peg$FAILED;
					if (peg$silentFails === 0) { peg$fail(peg$c13); }
				}
			}
			peg$silentFails--;
			if (s0 === peg$FAILED) {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c11); }
			}

			return s0;
		}

		function peg$parsews() {
			let s0,
				s1;

			peg$silentFails++;
			s0 = [];
			if (peg$c14.test(input.charAt(peg$currPos))) {
				s1 = input.charAt(peg$currPos);
				peg$currPos++;
			} else {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c15); }
			}
			while (s1 !== peg$FAILED) {
				s0.push(s1);
				if (peg$c14.test(input.charAt(peg$currPos))) {
					s1 = input.charAt(peg$currPos);
					peg$currPos++;
				} else {
					s1 = peg$FAILED;
					if (peg$silentFails === 0) { peg$fail(peg$c15); }
				}
			}
			peg$silentFails--;
			if (s0 === peg$FAILED) {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c11); }
			}

			return s0;
		}

		function peg$parserws() {
			let s0,
				s1;

			peg$silentFails++;
			s0 = [];
			if (peg$c14.test(input.charAt(peg$currPos))) {
				s1 = input.charAt(peg$currPos);
				peg$currPos++;
			} else {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c15); }
			}
			if (s1 !== peg$FAILED) {
				while (s1 !== peg$FAILED) {
					s0.push(s1);
					if (peg$c14.test(input.charAt(peg$currPos))) {
						s1 = input.charAt(peg$currPos);
						peg$currPos++;
					} else {
						s1 = peg$FAILED;
						if (peg$silentFails === 0) { peg$fail(peg$c15); }
					}
				}
			} else {
				s0 = peg$FAILED;
			}
			peg$silentFails--;
			if (s0 === peg$FAILED) {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c11); }
			}

			return s0;
		}

		function peg$parseredirection() {
			let s0,
				s1,
				s2,
				s3;

			peg$silentFails++;
			s0 = peg$currPos;
			if (input.charCodeAt(peg$currPos) === 59) {
				s1 = peg$c17;
				peg$currPos++;
			} else {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c18); }
			}
			if (s1 !== peg$FAILED) {
				peg$savedPos = s0;
				s1 = peg$c19();
			}
			s0 = s1;
			if (s0 === peg$FAILED) {
				s0 = peg$currPos;
				if (input.charCodeAt(peg$currPos) === 124) {
					s1 = peg$c20;
					peg$currPos++;
				} else {
					s1 = peg$FAILED;
					if (peg$silentFails === 0) { peg$fail(peg$c21); }
				}
				if (s1 !== peg$FAILED) {
					peg$savedPos = s0;
					s1 = peg$c22();
				}
				s0 = s1;
				if (s0 === peg$FAILED) {
					s0 = peg$currPos;
					s1 = peg$parsenumber();
					if (s1 !== peg$FAILED) {
						if (input.substr(peg$currPos, 2) === peg$c23) {
							s2 = peg$c23;
							peg$currPos += 2;
						} else {
							s2 = peg$FAILED;
							if (peg$silentFails === 0) { peg$fail(peg$c24); }
						}
						if (s2 !== peg$FAILED) {
							s3 = peg$parsenumber();
							if (s3 !== peg$FAILED) {
								peg$savedPos = s0;
								s1 = peg$c25(s1, s2, s3);
								s0 = s1;
							} else {
								peg$currPos = s0;
								s0 = peg$FAILED;
							}
						} else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
					if (s0 === peg$FAILED) {
						s0 = peg$currPos;
						s1 = peg$parsenumber();
						if (s1 !== peg$FAILED) {
							if (input.substr(peg$currPos, 2) === peg$c23) {
								s2 = peg$c23;
								peg$currPos += 2;
							} else {
								s2 = peg$FAILED;
								if (peg$silentFails === 0) { peg$fail(peg$c24); }
							}
							if (s2 !== peg$FAILED) {
								if (input.charCodeAt(peg$currPos) === 45) {
									s3 = peg$c26;
									peg$currPos++;
								} else {
									s3 = peg$FAILED;
									if (peg$silentFails === 0) { peg$fail(peg$c27); }
								}
								if (s3 !== peg$FAILED) {
									peg$savedPos = s0;
									s1 = peg$c28(s1, s2, s3);
									s0 = s1;
								} else {
									peg$currPos = s0;
									s0 = peg$FAILED;
								}
							} else {
								peg$currPos = s0;
								s0 = peg$FAILED;
							}
						} else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
						if (s0 === peg$FAILED) {
							s0 = peg$currPos;
							s1 = peg$parsenumber();
							if (s1 !== peg$FAILED) {
								if (input.substr(peg$currPos, 2) === peg$c29) {
									s2 = peg$c29;
									peg$currPos += 2;
								} else {
									s2 = peg$FAILED;
									if (peg$silentFails === 0) { peg$fail(peg$c30); }
								}
								if (s2 !== peg$FAILED) {
									s3 = peg$parsenumber();
									if (s3 !== peg$FAILED) {
										peg$savedPos = s0;
										s1 = peg$c31(s1, s2, s3);
										s0 = s1;
									} else {
										peg$currPos = s0;
										s0 = peg$FAILED;
									}
								} else {
									peg$currPos = s0;
									s0 = peg$FAILED;
								}
							} else {
								peg$currPos = s0;
								s0 = peg$FAILED;
							}
							if (s0 === peg$FAILED) {
								s0 = peg$currPos;
								s1 = peg$parsenumber();
								if (s1 !== peg$FAILED) {
									if (input.substr(peg$currPos, 2) === peg$c29) {
										s2 = peg$c29;
										peg$currPos += 2;
									} else {
										s2 = peg$FAILED;
										if (peg$silentFails === 0) { peg$fail(peg$c30); }
									}
									if (s2 !== peg$FAILED) {
										if (input.charCodeAt(peg$currPos) === 45) {
											s3 = peg$c26;
											peg$currPos++;
										} else {
											s3 = peg$FAILED;
											if (peg$silentFails === 0) { peg$fail(peg$c27); }
										}
										if (s3 !== peg$FAILED) {
											peg$savedPos = s0;
											s1 = peg$c28(s1, s2, s3);
											s0 = s1;
										} else {
											peg$currPos = s0;
											s0 = peg$FAILED;
										}
									} else {
										peg$currPos = s0;
										s0 = peg$FAILED;
									}
								} else {
									peg$currPos = s0;
									s0 = peg$FAILED;
								}
								if (s0 === peg$FAILED) {
									s0 = peg$currPos;
									s1 = peg$parsenumber();
									if (s1 !== peg$FAILED) {
										if (input.substr(peg$currPos, 2) === peg$c32) {
											s2 = peg$c32;
											peg$currPos += 2;
										} else {
											s2 = peg$FAILED;
											if (peg$silentFails === 0) { peg$fail(peg$c33); }
										}
										if (s2 !== peg$FAILED) {
											peg$savedPos = s0;
											s1 = peg$c34(s1, s2);
											s0 = s1;
										} else {
											peg$currPos = s0;
											s0 = peg$FAILED;
										}
									} else {
										peg$currPos = s0;
										s0 = peg$FAILED;
									}
									if (s0 === peg$FAILED) {
										s0 = peg$currPos;
										s1 = peg$parsenumber();
										if (s1 !== peg$FAILED) {
											if (input.substr(peg$currPos, 2) === peg$c23) {
												s2 = peg$c23;
												peg$currPos += 2;
											} else {
												s2 = peg$FAILED;
												if (peg$silentFails === 0) { peg$fail(peg$c24); }
											}
											if (s2 !== peg$FAILED) {
												peg$savedPos = s0;
												s1 = peg$c34(s1, s2);
												s0 = s1;
											} else {
												peg$currPos = s0;
												s0 = peg$FAILED;
											}
										} else {
											peg$currPos = s0;
											s0 = peg$FAILED;
										}
										if (s0 === peg$FAILED) {
											s0 = peg$currPos;
											s1 = peg$parsenumber();
											if (s1 !== peg$FAILED) {
												if (input.substr(peg$currPos, 2) === peg$c35) {
													s2 = peg$c35;
													peg$currPos += 2;
												} else {
													s2 = peg$FAILED;
													if (peg$silentFails === 0) { peg$fail(peg$c36); }
												}
												if (s2 !== peg$FAILED) {
													peg$savedPos = s0;
													s1 = peg$c34(s1, s2);
													s0 = s1;
												} else {
													peg$currPos = s0;
													s0 = peg$FAILED;
												}
											} else {
												peg$currPos = s0;
												s0 = peg$FAILED;
											}
											if (s0 === peg$FAILED) {
												s0 = peg$currPos;
												s1 = peg$parsenumber();
												if (s1 !== peg$FAILED) {
													if (input.charCodeAt(peg$currPos) === 62) {
														s2 = peg$c37;
														peg$currPos++;
													} else {
														s2 = peg$FAILED;
														if (peg$silentFails === 0) { peg$fail(peg$c38); }
													}
													if (s2 !== peg$FAILED) {
														peg$savedPos = s0;
														s1 = peg$c34(s1, s2);
														s0 = s1;
													} else {
														peg$currPos = s0;
														s0 = peg$FAILED;
													}
												} else {
													peg$currPos = s0;
													s0 = peg$FAILED;
												}
												if (s0 === peg$FAILED) {
													s0 = peg$currPos;
													s1 = peg$parsenumber();
													if (s1 !== peg$FAILED) {
														if (input.substr(peg$currPos, 3) === peg$c39) {
															s2 = peg$c39;
															peg$currPos += 3;
														} else {
															s2 = peg$FAILED;
															if (peg$silentFails === 0) { peg$fail(peg$c40); }
														}
														if (s2 !== peg$FAILED) {
															peg$savedPos = s0;
															s1 = peg$c34(s1, s2);
															s0 = s1;
														} else {
															peg$currPos = s0;
															s0 = peg$FAILED;
														}
													} else {
														peg$currPos = s0;
														s0 = peg$FAILED;
													}
													if (s0 === peg$FAILED) {
														s0 = peg$currPos;
														s1 = peg$parsenumber();
														if (s1 !== peg$FAILED) {
															if (input.substr(peg$currPos, 2) === peg$c41) {
																s2 = peg$c41;
																peg$currPos += 2;
															} else {
																s2 = peg$FAILED;
																if (peg$silentFails === 0) { peg$fail(peg$c42); }
															}
															if (s2 !== peg$FAILED) {
																peg$savedPos = s0;
																s1 = peg$c34(s1, s2);
																s0 = s1;
															} else {
																peg$currPos = s0;
																s0 = peg$FAILED;
															}
														} else {
															peg$currPos = s0;
															s0 = peg$FAILED;
														}
														if (s0 === peg$FAILED) {
															s0 = peg$currPos;
															s1 = peg$parsenumber();
															if (s1 !== peg$FAILED) {
																if (input.substr(peg$currPos, 2) === peg$c29) {
																	s2 = peg$c29;
																	peg$currPos += 2;
																} else {
																	s2 = peg$FAILED;
																	if (peg$silentFails === 0) { peg$fail(peg$c30); }
																}
																if (s2 !== peg$FAILED) {
																	peg$savedPos = s0;
																	s1 = peg$c34(s1, s2);
																	s0 = s1;
																} else {
																	peg$currPos = s0;
																	s0 = peg$FAILED;
																}
															} else {
																peg$currPos = s0;
																s0 = peg$FAILED;
															}
															if (s0 === peg$FAILED) {
																s0 = peg$currPos;
																s1 = peg$parsenumber();
																if (s1 !== peg$FAILED) {
																	if (input.substr(peg$currPos, 2) === peg$c43) {
																		s2 = peg$c43;
																		peg$currPos += 2;
																	} else {
																		s2 = peg$FAILED;
																		if (peg$silentFails === 0) { peg$fail(peg$c44); }
																	}
																	if (s2 !== peg$FAILED) {
																		peg$savedPos = s0;
																		s1 = peg$c34(s1, s2);
																		s0 = s1;
																	} else {
																		peg$currPos = s0;
																		s0 = peg$FAILED;
																	}
																} else {
																	peg$currPos = s0;
																	s0 = peg$FAILED;
																}
																if (s0 === peg$FAILED) {
																	s0 = peg$currPos;
																	s1 = peg$parsenumber();
																	if (s1 !== peg$FAILED) {
																		if (input.charCodeAt(peg$currPos) === 60) {
																			s2 = peg$c45;
																			peg$currPos++;
																		} else {
																			s2 = peg$FAILED;
																			if (peg$silentFails === 0) { peg$fail(peg$c46); }
																		}
																		if (s2 !== peg$FAILED) {
																			peg$savedPos = s0;
																			s1 = peg$c34(s1, s2);
																			s0 = s1;
																		} else {
																			peg$currPos = s0;
																			s0 = peg$FAILED;
																		}
																	} else {
																		peg$currPos = s0;
																		s0 = peg$FAILED;
																	}
																	if (s0 === peg$FAILED) {
																		s0 = peg$currPos;
																		if (input.substr(peg$currPos, 2) === peg$c23) {
																			s1 = peg$c23;
																			peg$currPos += 2;
																		} else {
																			s1 = peg$FAILED;
																			if (peg$silentFails === 0) { peg$fail(peg$c24); }
																		}
																		if (s1 !== peg$FAILED) {
																			s2 = peg$parsenumber();
																			if (s2 !== peg$FAILED) {
																				peg$savedPos = s0;
																				s1 = peg$c47(s1, s2);
																				s0 = s1;
																			} else {
																				peg$currPos = s0;
																				s0 = peg$FAILED;
																			}
																		} else {
																			peg$currPos = s0;
																			s0 = peg$FAILED;
																		}
																		if (s0 === peg$FAILED) {
																			s0 = peg$currPos;
																			if (input.substr(peg$currPos, 2) === peg$c23) {
																				s1 = peg$c23;
																				peg$currPos += 2;
																			} else {
																				s1 = peg$FAILED;
																				if (peg$silentFails === 0) { peg$fail(peg$c24); }
																			}
																			if (s1 !== peg$FAILED) {
																				if (input.charCodeAt(peg$currPos) === 45) {
																					s2 = peg$c26;
																					peg$currPos++;
																				} else {
																					s2 = peg$FAILED;
																					if (peg$silentFails === 0) { peg$fail(peg$c27); }
																				}
																				if (s2 !== peg$FAILED) {
																					peg$savedPos = s0;
																					s1 = peg$c48(s1, s2);
																					s0 = s1;
																				} else {
																					peg$currPos = s0;
																					s0 = peg$FAILED;
																				}
																			} else {
																				peg$currPos = s0;
																				s0 = peg$FAILED;
																			}
																			if (s0 === peg$FAILED) {
																				s0 = peg$currPos;
																				if (input.substr(peg$currPos, 2) === peg$c29) {
																					s1 = peg$c29;
																					peg$currPos += 2;
																				} else {
																					s1 = peg$FAILED;
																					if (peg$silentFails === 0) { peg$fail(peg$c30); }
																				}
																				if (s1 !== peg$FAILED) {
																					s2 = peg$parsenumber();
																					if (s2 !== peg$FAILED) {
																						peg$savedPos = s0;
																						s1 = peg$c47(s1, s2);
																						s0 = s1;
																					} else {
																						peg$currPos = s0;
																						s0 = peg$FAILED;
																					}
																				} else {
																					peg$currPos = s0;
																					s0 = peg$FAILED;
																				}
																				if (s0 === peg$FAILED) {
																					s0 = peg$currPos;
																					if (input.substr(peg$currPos, 2) === peg$c29) {
																						s1 = peg$c29;
																						peg$currPos += 2;
																					} else {
																						s1 = peg$FAILED;
																						if (peg$silentFails === 0) { peg$fail(peg$c30); }
																					}
																					if (s1 !== peg$FAILED) {
																						if (input.charCodeAt(peg$currPos) === 45) {
																							s2 = peg$c26;
																							peg$currPos++;
																						} else {
																							s2 = peg$FAILED;
																							if (peg$silentFails === 0) { peg$fail(peg$c27); }
																						}
																						if (s2 !== peg$FAILED) {
																							peg$savedPos = s0;
																							s1 = peg$c48(s1, s2);
																							s0 = s1;
																						} else {
																							peg$currPos = s0;
																							s0 = peg$FAILED;
																						}
																					} else {
																						peg$currPos = s0;
																						s0 = peg$FAILED;
																					}
																					if (s0 === peg$FAILED) {
																						s0 = peg$currPos;
																						if (input.substr(peg$currPos, 2) === peg$c32) {
																							s1 = peg$c32;
																							peg$currPos += 2;
																						} else {
																							s1 = peg$FAILED;
																							if (peg$silentFails === 0) { peg$fail(peg$c33); }
																						}
																						if (s1 !== peg$FAILED) {
																							peg$savedPos = s0;
																							s1 = peg$c49(s1);
																						}
																						s0 = s1;
																						if (s0 === peg$FAILED) {
																							s0 = peg$currPos;
																							if (input.substr(peg$currPos, 2) === peg$c23) {
																								s1 = peg$c23;
																								peg$currPos += 2;
																							} else {
																								s1 = peg$FAILED;
																								if (peg$silentFails === 0) { peg$fail(peg$c24); }
																							}
																							if (s1 !== peg$FAILED) {
																								peg$savedPos = s0;
																								s1 = peg$c49(s1);
																							}
																							s0 = s1;
																							if (s0 === peg$FAILED) {
																								s0 = peg$currPos;
																								if (input.substr(peg$currPos, 2) === peg$c35) {
																									s1 = peg$c35;
																									peg$currPos += 2;
																								} else {
																									s1 = peg$FAILED;
																									if (peg$silentFails === 0) { peg$fail(peg$c36); }
																								}
																								if (s1 !== peg$FAILED) {
																									peg$savedPos = s0;
																									s1 = peg$c49(s1);
																								}
																								s0 = s1;
																								if (s0 === peg$FAILED) {
																									s0 = peg$currPos;
																									if (input.charCodeAt(peg$currPos) === 62) {
																										s1 = peg$c37;
																										peg$currPos++;
																									} else {
																										s1 = peg$FAILED;
																										if (peg$silentFails === 0) { peg$fail(peg$c38); }
																									}
																									if (s1 !== peg$FAILED) {
																										peg$savedPos = s0;
																										s1 = peg$c49(s1);
																									}
																									s0 = s1;
																									if (s0 === peg$FAILED) {
																										s0 = peg$currPos;
																										if (input.substr(peg$currPos, 3) === peg$c39) {
																											s1 = peg$c39;
																											peg$currPos += 3;
																										} else {
																											s1 = peg$FAILED;
																											if (peg$silentFails === 0) { peg$fail(peg$c40); }
																										}
																										if (s1 !== peg$FAILED) {
																											peg$savedPos = s0;
																											s1 = peg$c49(s1);
																										}
																										s0 = s1;
																										if (s0 === peg$FAILED) {
																											s0 = peg$currPos;
																											if (input.substr(peg$currPos, 2) === peg$c41) {
																												s1 = peg$c41;
																												peg$currPos += 2;
																											} else {
																												s1 = peg$FAILED;
																												if (peg$silentFails === 0) { peg$fail(peg$c42); }
																											}
																											if (s1 !== peg$FAILED) {
																												peg$savedPos = s0;
																												s1 = peg$c49(s1);
																											}
																											s0 = s1;
																											if (s0 === peg$FAILED) {
																												s0 = peg$currPos;
																												if (input.substr(peg$currPos, 2) === peg$c29) {
																													s1 = peg$c29;
																													peg$currPos += 2;
																												} else {
																													s1 = peg$FAILED;
																													if (peg$silentFails === 0) { peg$fail(peg$c30); }
																												}
																												if (s1 !== peg$FAILED) {
																													peg$savedPos = s0;
																													s1 = peg$c49(s1);
																												}
																												s0 = s1;
																												if (s0 === peg$FAILED) {
																													s0 = peg$currPos;
																													if (input.substr(peg$currPos, 2) === peg$c43) {
																														s1 = peg$c43;
																														peg$currPos += 2;
																													} else {
																														s1 = peg$FAILED;
																														if (peg$silentFails === 0) { peg$fail(peg$c44); }
																													}
																													if (s1 !== peg$FAILED) {
																														peg$savedPos = s0;
																														s1 = peg$c49(s1);
																													}
																													s0 = s1;
																													if (s0 === peg$FAILED) {
																														s0 = peg$currPos;
																														if (input.charCodeAt(peg$currPos) === 60) {
																															s1 = peg$c45;
																															peg$currPos++;
																														} else {
																															s1 = peg$FAILED;
																															if (peg$silentFails === 0) { peg$fail(peg$c46); }
																														}
																														if (s1 !== peg$FAILED) {
																															peg$savedPos = s0;
																															s1 = peg$c49(s1);
																														}
																														s0 = s1;
																														if (s0 === peg$FAILED) {
																															s0 = peg$currPos;
																															if (input.substr(peg$currPos, 2) === peg$c50) {
																																s1 = peg$c50;
																																peg$currPos += 2;
																															} else {
																																s1 = peg$FAILED;
																																if (peg$silentFails === 0) { peg$fail(peg$c51); }
																															}
																															if (s1 !== peg$FAILED) {
																																s2 = peg$parsenumber();
																																if (s2 !== peg$FAILED) {
																																	peg$savedPos = s0;
																																	s1 = peg$c47(s1, s2);
																																	s0 = s1;
																																} else {
																																	peg$currPos = s0;
																																	s0 = peg$FAILED;
																																}
																															} else {
																																peg$currPos = s0;
																																s0 = peg$FAILED;
																															}
																															if (s0 === peg$FAILED) {
																																s0 = peg$currPos;
																																if (input.substr(peg$currPos, 2) === peg$c50) {
																																	s1 = peg$c50;
																																	peg$currPos += 2;
																																} else {
																																	s1 = peg$FAILED;
																																	if (peg$silentFails === 0) { peg$fail(peg$c51); }
																																}
																																if (s1 !== peg$FAILED) {
																																	peg$savedPos = s0;
																																	s1 = peg$c49(s1);
																																}
																																s0 = s1;
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
			peg$silentFails--;
			if (s0 === peg$FAILED) {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c16); }
			}

			return s0;
		}

		function peg$parsearg() {
			let s0,
				s1,
				s2;

			peg$silentFails++;
			s0 = peg$currPos;
			s1 = peg$parsenbws();
			if (s1 !== peg$FAILED) {
				s2 = peg$parsevalue();
				if (s2 === peg$FAILED) {
					s2 = peg$parsevariable();
				}
				if (s2 !== peg$FAILED) {
					peg$savedPos = s0;
					s1 = peg$c53(s2);
					s0 = s1;
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}
			peg$silentFails--;
			if (s0 === peg$FAILED) {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c52); }
			}

			return s0;
		}

		function peg$parsevalue() {
			let s0,
				s1;

			peg$silentFails++;
			s0 = peg$parsefalse();
			if (s0 === peg$FAILED) {
				s0 = peg$parsenull();
				if (s0 === peg$FAILED) {
					s0 = peg$parsetrue();
					if (s0 === peg$FAILED) {
						s0 = peg$parsenumber();
						if (s0 === peg$FAILED) {
							s0 = peg$parsestring();
							if (s0 === peg$FAILED) {
								s0 = peg$parseidentifier();
							}
						}
					}
				}
			}
			peg$silentFails--;
			if (s0 === peg$FAILED) {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c54); }
			}

			return s0;
		}

		function peg$parsefalse() {
			let s0,
				s1;

			s0 = peg$currPos;
			if (input.substr(peg$currPos, 5) === peg$c55) {
				s1 = peg$c55;
				peg$currPos += 5;
			} else {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c56); }
			}
			if (s1 !== peg$FAILED) {
				peg$savedPos = s0;
				s1 = peg$c57();
			}
			s0 = s1;

			return s0;
		}

		function peg$parsenull() {
			let s0,
				s1;

			s0 = peg$currPos;
			if (input.substr(peg$currPos, 4) === peg$c58) {
				s1 = peg$c58;
				peg$currPos += 4;
			} else {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c59); }
			}
			if (s1 !== peg$FAILED) {
				peg$savedPos = s0;
				s1 = peg$c60();
			}
			s0 = s1;

			return s0;
		}

		function peg$parsetrue() {
			let s0,
				s1;

			s0 = peg$currPos;
			if (input.substr(peg$currPos, 4) === peg$c61) {
				s1 = peg$c61;
				peg$currPos += 4;
			} else {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c62); }
			}
			if (s1 !== peg$FAILED) {
				peg$savedPos = s0;
				s1 = peg$c63();
			}
			s0 = s1;

			return s0;
		}

		function peg$parsevariable() {
			let s0,
				s1,
				s2,
				s3,
				s4;

			peg$silentFails++;
			s0 = peg$currPos;
			s1 = [];
			if (input.charCodeAt(peg$currPos) === 45) {
				s2 = peg$c26;
				peg$currPos++;
			} else {
				s2 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c27); }
			}
			if (s2 !== peg$FAILED) {
				while (s2 !== peg$FAILED) {
					s1.push(s2);
					if (input.charCodeAt(peg$currPos) === 45) {
						s2 = peg$c26;
						peg$currPos++;
					} else {
						s2 = peg$FAILED;
						if (peg$silentFails === 0) { peg$fail(peg$c27); }
					}
				}
			} else {
				s1 = peg$FAILED;
			}
			if (s1 !== peg$FAILED) {
				s2 = peg$parsevariablename();
				if (s2 !== peg$FAILED) {
					s3 = peg$parsews();
					if (s3 !== peg$FAILED) {
						s4 = peg$parsevariablesetter();
						if (s4 === peg$FAILED) {
							s4 = null;
						}
						if (s4 !== peg$FAILED) {
							peg$savedPos = s0;
							s1 = peg$c65(s2, s4);
							s0 = s1;
						} else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}
			peg$silentFails--;
			if (s0 === peg$FAILED) {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c64); }
			}

			return s0;
		}

		function peg$parsevariablename() {
			let s0,
				s1,
				s2,
				s3;

			peg$silentFails++;
			s0 = peg$currPos;
			if (peg$c66.test(input.charAt(peg$currPos))) {
				s1 = input.charAt(peg$currPos);
				peg$currPos++;
			} else {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c67); }
			}
			if (s1 !== peg$FAILED) {
				s2 = [];
				if (peg$c68.test(input.charAt(peg$currPos))) {
					s3 = input.charAt(peg$currPos);
					peg$currPos++;
				} else {
					s3 = peg$FAILED;
					if (peg$silentFails === 0) { peg$fail(peg$c69); }
				}
				while (s3 !== peg$FAILED) {
					s2.push(s3);
					if (peg$c68.test(input.charAt(peg$currPos))) {
						s3 = input.charAt(peg$currPos);
						peg$currPos++;
					} else {
						s3 = peg$FAILED;
						if (peg$silentFails === 0) { peg$fail(peg$c69); }
					}
				}
				if (s2 !== peg$FAILED) {
					peg$savedPos = s0;
					s1 = peg$c70();
					s0 = s1;
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}
			peg$silentFails--;
			if (s0 === peg$FAILED) {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c64); }
			}

			return s0;
		}

		function peg$parsevariablesetter() {
			let s0,
				s1,
				s2,
				s3;

			peg$silentFails++;
			s0 = peg$currPos;
			if (input.charCodeAt(peg$currPos) === 61) {
				s1 = peg$c72;
				peg$currPos++;
			} else {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c73); }
			}
			if (s1 === peg$FAILED) {
				s1 = null;
			}
			if (s1 !== peg$FAILED) {
				s2 = peg$parsews();
				if (s2 !== peg$FAILED) {
					s3 = peg$parsevalue();
					if (s3 !== peg$FAILED) {
						peg$savedPos = s0;
						s1 = peg$c53(s3);
						s0 = s1;
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}
			peg$silentFails--;
			if (s0 === peg$FAILED) {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c71); }
			}

			return s0;
		}

		function peg$parsenumber() {
			let s0,
				s1,
				s2,
				s3,
				s4;

			peg$silentFails++;
			s0 = peg$currPos;
			s1 = peg$parseminus();
			if (s1 === peg$FAILED) {
				s1 = null;
			}
			if (s1 !== peg$FAILED) {
				s2 = peg$parseint();
				if (s2 !== peg$FAILED) {
					s3 = peg$parsefrac();
					if (s3 === peg$FAILED) {
						s3 = null;
					}
					if (s3 !== peg$FAILED) {
						s4 = peg$parseexp();
						if (s4 === peg$FAILED) {
							s4 = null;
						}
						if (s4 !== peg$FAILED) {
							peg$savedPos = s0;
							s1 = peg$c75();
							s0 = s1;
						} else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}
			peg$silentFails--;
			if (s0 === peg$FAILED) {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c74); }
			}

			return s0;
		}

		function peg$parsedecimal_point() {
			let s0,
				s1;

			peg$silentFails++;
			if (input.charCodeAt(peg$currPos) === 46) {
				s0 = peg$c77;
				peg$currPos++;
			} else {
				s0 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c78); }
			}
			peg$silentFails--;
			if (s0 === peg$FAILED) {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c76); }
			}

			return s0;
		}

		function peg$parsedigit1_9() {
			let s0,
				s1;

			peg$silentFails++;
			if (peg$c80.test(input.charAt(peg$currPos))) {
				s0 = input.charAt(peg$currPos);
				peg$currPos++;
			} else {
				s0 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c81); }
			}
			peg$silentFails--;
			if (s0 === peg$FAILED) {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c79); }
			}

			return s0;
		}

		function peg$parsee() {
			let s0,
				s1;

			peg$silentFails++;
			if (peg$c83.test(input.charAt(peg$currPos))) {
				s0 = input.charAt(peg$currPos);
				peg$currPos++;
			} else {
				s0 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c84); }
			}
			peg$silentFails--;
			if (s0 === peg$FAILED) {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c82); }
			}

			return s0;
		}

		function peg$parseexp() {
			let s0,
				s1,
				s2,
				s3,
				s4;

			peg$silentFails++;
			s0 = peg$currPos;
			s1 = peg$parsee();
			if (s1 !== peg$FAILED) {
				s2 = peg$parseminus();
				if (s2 === peg$FAILED) {
					s2 = peg$parseplus();
				}
				if (s2 === peg$FAILED) {
					s2 = null;
				}
				if (s2 !== peg$FAILED) {
					s3 = [];
					s4 = peg$parseDIGIT();
					if (s4 !== peg$FAILED) {
						while (s4 !== peg$FAILED) {
							s3.push(s4);
							s4 = peg$parseDIGIT();
						}
					} else {
						s3 = peg$FAILED;
					}
					if (s3 !== peg$FAILED) {
						s1 = [s1, s2, s3];
						s0 = s1;
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}
			peg$silentFails--;
			if (s0 === peg$FAILED) {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c85); }
			}

			return s0;
		}

		function peg$parsefrac() {
			let s0,
				s1,
				s2,
				s3;

			peg$silentFails++;
			s0 = peg$currPos;
			s1 = peg$parsedecimal_point();
			if (s1 !== peg$FAILED) {
				s2 = [];
				s3 = peg$parseDIGIT();
				if (s3 !== peg$FAILED) {
					while (s3 !== peg$FAILED) {
						s2.push(s3);
						s3 = peg$parseDIGIT();
					}
				} else {
					s2 = peg$FAILED;
				}
				if (s2 !== peg$FAILED) {
					s1 = [s1, s2];
					s0 = s1;
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}
			peg$silentFails--;
			if (s0 === peg$FAILED) {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c86); }
			}

			return s0;
		}

		function peg$parseint() {
			let s0,
				s1,
				s2,
				s3;

			peg$silentFails++;
			s0 = peg$parsezero();
			if (s0 === peg$FAILED) {
				s0 = peg$currPos;
				s1 = peg$parsedigit1_9();
				if (s1 !== peg$FAILED) {
					s2 = [];
					s3 = peg$parseDIGIT();
					while (s3 !== peg$FAILED) {
						s2.push(s3);
						s3 = peg$parseDIGIT();
					}
					if (s2 !== peg$FAILED) {
						s1 = [s1, s2];
						s0 = s1;
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
			}
			peg$silentFails--;
			if (s0 === peg$FAILED) {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c87); }
			}

			return s0;
		}

		function peg$parseminus() {
			let s0,
				s1;

			peg$silentFails++;
			if (input.charCodeAt(peg$currPos) === 45) {
				s0 = peg$c26;
				peg$currPos++;
			} else {
				s0 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c27); }
			}
			peg$silentFails--;
			if (s0 === peg$FAILED) {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c88); }
			}

			return s0;
		}

		function peg$parseplus() {
			let s0,
				s1;

			peg$silentFails++;
			if (input.charCodeAt(peg$currPos) === 43) {
				s0 = peg$c90;
				peg$currPos++;
			} else {
				s0 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c91); }
			}
			peg$silentFails--;
			if (s0 === peg$FAILED) {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c89); }
			}

			return s0;
		}

		function peg$parsezero() {
			let s0,
				s1;

			peg$silentFails++;
			if (input.charCodeAt(peg$currPos) === 48) {
				s0 = peg$c93;
				peg$currPos++;
			} else {
				s0 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c94); }
			}
			peg$silentFails--;
			if (s0 === peg$FAILED) {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c92); }
			}

			return s0;
		}

		function peg$parseidentifier() {
			let s0,
				s1,
				s2,
				s3;

			peg$silentFails++;
			s0 = peg$currPos;
			if (peg$c96.test(input.charAt(peg$currPos))) {
				s1 = input.charAt(peg$currPos);
				peg$currPos++;
			} else {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c97); }
			}
			if (s1 !== peg$FAILED) {
				s2 = [];
				if (peg$c98.test(input.charAt(peg$currPos))) {
					s3 = input.charAt(peg$currPos);
					peg$currPos++;
				} else {
					s3 = peg$FAILED;
					if (peg$silentFails === 0) { peg$fail(peg$c99); }
				}
				while (s3 !== peg$FAILED) {
					s2.push(s3);
					if (peg$c98.test(input.charAt(peg$currPos))) {
						s3 = input.charAt(peg$currPos);
						peg$currPos++;
					} else {
						s3 = peg$FAILED;
						if (peg$silentFails === 0) { peg$fail(peg$c99); }
					}
				}
				if (s2 !== peg$FAILED) {
					peg$savedPos = s0;
					s1 = peg$c70();
					s0 = s1;
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}
			peg$silentFails--;
			if (s0 === peg$FAILED) {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c95); }
			}

			return s0;
		}

		function peg$parsestring() {
			let s0,
				s1,
				s2,
				s3;

			peg$silentFails++;
			s0 = peg$currPos;
			s1 = peg$parsequotation_mark();
			if (s1 !== peg$FAILED) {
				s2 = [];
				s3 = peg$parsechar();
				while (s3 !== peg$FAILED) {
					s2.push(s3);
					s3 = peg$parsechar();
				}
				if (s2 !== peg$FAILED) {
					s3 = peg$parsequotation_mark();
					if (s3 !== peg$FAILED) {
						peg$savedPos = s0;
						s1 = peg$c101(s2);
						s0 = s1;
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}
			peg$silentFails--;
			if (s0 === peg$FAILED) {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c100); }
			}

			return s0;
		}

		function peg$parsechar() {
			let s0,
				s1,
				s2,
				s3,
				s4,
				s5,
				s6,
				s7,
				s8,
				s9;

			peg$silentFails++;
			s0 = peg$parseunescaped();
			if (s0 === peg$FAILED) {
				s0 = peg$currPos;
				s1 = peg$parseescape();
				if (s1 !== peg$FAILED) {
					if (input.charCodeAt(peg$currPos) === 34) {
						s2 = peg$c103;
						peg$currPos++;
					} else {
						s2 = peg$FAILED;
						if (peg$silentFails === 0) { peg$fail(peg$c104); }
					}
					if (s2 === peg$FAILED) {
						if (input.charCodeAt(peg$currPos) === 92) {
							s2 = peg$c105;
							peg$currPos++;
						} else {
							s2 = peg$FAILED;
							if (peg$silentFails === 0) { peg$fail(peg$c106); }
						}
						if (s2 === peg$FAILED) {
							if (input.charCodeAt(peg$currPos) === 47) {
								s2 = peg$c107;
								peg$currPos++;
							} else {
								s2 = peg$FAILED;
								if (peg$silentFails === 0) { peg$fail(peg$c108); }
							}
							if (s2 === peg$FAILED) {
								s2 = peg$currPos;
								if (input.charCodeAt(peg$currPos) === 98) {
									s3 = peg$c109;
									peg$currPos++;
								} else {
									s3 = peg$FAILED;
									if (peg$silentFails === 0) { peg$fail(peg$c110); }
								}
								if (s3 !== peg$FAILED) {
									peg$savedPos = s2;
									s3 = peg$c111();
								}
								s2 = s3;
								if (s2 === peg$FAILED) {
									s2 = peg$currPos;
									if (input.charCodeAt(peg$currPos) === 102) {
										s3 = peg$c112;
										peg$currPos++;
									} else {
										s3 = peg$FAILED;
										if (peg$silentFails === 0) { peg$fail(peg$c113); }
									}
									if (s3 !== peg$FAILED) {
										peg$savedPos = s2;
										s3 = peg$c114();
									}
									s2 = s3;
									if (s2 === peg$FAILED) {
										s2 = peg$currPos;
										if (input.charCodeAt(peg$currPos) === 110) {
											s3 = peg$c115;
											peg$currPos++;
										} else {
											s3 = peg$FAILED;
											if (peg$silentFails === 0) { peg$fail(peg$c116); }
										}
										if (s3 !== peg$FAILED) {
											peg$savedPos = s2;
											s3 = peg$c117();
										}
										s2 = s3;
										if (s2 === peg$FAILED) {
											s2 = peg$currPos;
											if (input.charCodeAt(peg$currPos) === 114) {
												s3 = peg$c118;
												peg$currPos++;
											} else {
												s3 = peg$FAILED;
												if (peg$silentFails === 0) { peg$fail(peg$c119); }
											}
											if (s3 !== peg$FAILED) {
												peg$savedPos = s2;
												s3 = peg$c120();
											}
											s2 = s3;
											if (s2 === peg$FAILED) {
												s2 = peg$currPos;
												if (input.charCodeAt(peg$currPos) === 116) {
													s3 = peg$c121;
													peg$currPos++;
												} else {
													s3 = peg$FAILED;
													if (peg$silentFails === 0) { peg$fail(peg$c122); }
												}
												if (s3 !== peg$FAILED) {
													peg$savedPos = s2;
													s3 = peg$c123();
												}
												s2 = s3;
												if (s2 === peg$FAILED) {
													s2 = peg$currPos;
													if (input.charCodeAt(peg$currPos) === 117) {
														s3 = peg$c124;
														peg$currPos++;
													} else {
														s3 = peg$FAILED;
														if (peg$silentFails === 0) { peg$fail(peg$c125); }
													}
													if (s3 !== peg$FAILED) {
														s4 = peg$currPos;
														s5 = peg$currPos;
														s6 = peg$parseHEXDIG();
														if (s6 !== peg$FAILED) {
															s7 = peg$parseHEXDIG();
															if (s7 !== peg$FAILED) {
																s8 = peg$parseHEXDIG();
																if (s8 !== peg$FAILED) {
																	s9 = peg$parseHEXDIG();
																	if (s9 !== peg$FAILED) {
																		s6 = [s6, s7, s8, s9];
																		s5 = s6;
																	} else {
																		peg$currPos = s5;
																		s5 = peg$FAILED;
																	}
																} else {
																	peg$currPos = s5;
																	s5 = peg$FAILED;
																}
															} else {
																peg$currPos = s5;
																s5 = peg$FAILED;
															}
														} else {
															peg$currPos = s5;
															s5 = peg$FAILED;
														}
														if (s5 !== peg$FAILED) {
															s4 = input.substring(s4, peg$currPos);
														} else {
															s4 = s5;
														}
														if (s4 !== peg$FAILED) {
															peg$savedPos = s2;
															s3 = peg$c126(s4);
															s2 = s3;
														} else {
															peg$currPos = s2;
															s2 = peg$FAILED;
														}
													} else {
														peg$currPos = s2;
														s2 = peg$FAILED;
													}
												}
											}
										}
									}
								}
							}
						}
					}
					if (s2 !== peg$FAILED) {
						peg$savedPos = s0;
						s1 = peg$c127(s2);
						s0 = s1;
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
			}
			peg$silentFails--;
			if (s0 === peg$FAILED) {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c102); }
			}

			return s0;
		}

		function peg$parseescape() {
			let s0,
				s1;

			peg$silentFails++;
			if (input.charCodeAt(peg$currPos) === 92) {
				s0 = peg$c105;
				peg$currPos++;
			} else {
				s0 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c106); }
			}
			peg$silentFails--;
			if (s0 === peg$FAILED) {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c128); }
			}

			return s0;
		}

		function peg$parsequotation_mark() {
			let s0,
				s1;

			peg$silentFails++;
			if (input.charCodeAt(peg$currPos) === 34) {
				s0 = peg$c103;
				peg$currPos++;
			} else {
				s0 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c104); }
			}
			peg$silentFails--;
			if (s0 === peg$FAILED) {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c129); }
			}

			return s0;
		}

		function peg$parseunescaped() {
			let s0,
				s1;

			peg$silentFails++;
			if (peg$c131.test(input.charAt(peg$currPos))) {
				s0 = input.charAt(peg$currPos);
				peg$currPos++;
			} else {
				s0 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c132); }
			}
			peg$silentFails--;
			if (s0 === peg$FAILED) {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c130); }
			}

			return s0;
		}

		function peg$parseDIGIT() {
			let s0,
				s1;

			peg$silentFails++;
			if (peg$c133.test(input.charAt(peg$currPos))) {
				s0 = input.charAt(peg$currPos);
				peg$currPos++;
			} else {
				s0 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c134); }
			}
			peg$silentFails--;
			if (s0 === peg$FAILED) {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c79); }
			}

			return s0;
		}

		function peg$parseHEXDIG() {
			let s0,
				s1;

			peg$silentFails++;
			if (peg$c136.test(input.charAt(peg$currPos))) {
				s0 = input.charAt(peg$currPos);
				peg$currPos++;
			} else {
				s0 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c137); }
			}
			peg$silentFails--;
			if (s0 === peg$FAILED) {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c135); }
			}

			return s0;
		}

		peg$result = peg$startRuleFunction();

		if (peg$result !== peg$FAILED && peg$currPos === input.length) {
			return peg$result;
		}
		if (peg$result !== peg$FAILED && peg$currPos < input.length) {
			peg$fail(peg$endExpectation());
		}

		throw peg$buildStructuredError(
			peg$maxFailExpected,
			peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
			peg$maxFailPos < input.length
				? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
				: peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
		);
	}

	return {
		SyntaxError: peg$SyntaxError,
		parse: peg$parse
	};
}());
